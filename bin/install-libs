#!/bin/bash
set -e

build_dir="builds/repos"
forced=0
prefix=/usr/local
cached=0
documentation=0

test -z "$LSUDO" && LSUDO="sudo"
test "$(whoami)" = "root" && LSUDO=""

while (( $# > 0 )); do
    case "$1" in
        --force)
            forced=1; shift;;
        --cached)
            cached=1; shift;;
        --build-dir)
            build_dir="$2"; shift 2;;
        --build-dir=*)
            build_dir="${1#--build-dir=}"; shift;;
        --prefix)
            prefix="$2"; shift 2;;
        --prefix=*)
            prefix="${1#--prefix=}"; shift;;
        --with-documentation)
            documentation=1; shift;;
        --without-documentation)
            documentation=0; shift;;
        --*)
            echo "$(basename $0) [--force] [--cached] [--without-documentation] [--build-dir dir] [--prefix dir] [install|uninstall]"; exit 0;;
        *) break ;;
    esac
done

if [ "$1" == "" ]; then
    cmd=install
else
    cmd=$1
    shift
fi

echo "library dependencies go into $prefix, forced=$forced, cmd=$cmd, build_dir=$build_dir"

mkdir -p $build_dir
cd $build_dir
export PATH=$(pwd)/cmake/bin:$PATH

case $OSTYPE in
    darwin*)
        export CC=clang
        export CXX=clang++
        ldconfig=/usr/bin/true
        cmake_strip=3
        ;;
    *)
        export CC=gcc
        export CXX=g++
        ldconfig=ldconfig
        cmake_strip=1
        ;;
esac

# setup pkgconfig path so that libzmq can find libsodium
# and libczmq can find libzmq
export PKG_CONFIG_PATH="$prefix/lib/pkgconfig:$PKG_CONFIG_PATH"
echo "using PKG_CONFIG_PATH=$PKG_CONFIG_PATH"

function handle_cmake()
{
    v=3.12.1
    if [ $cmd == "reset" ]; then
        rm -rf $d
        return
    fi
    d=cmake
    f="cmake-$v-$(uname -s)-x86_64.tar.gz"
    test -f $f || wget -nv https://cmake.org/files/v3.12/$f
    test -d $d || (mkdir $d && tar xzf $f -C $d --strip-components=$cmake_strip)
    echo "using CMAKE=$(which cmake)"
}

function handle_prometheus_cpp()
{
    d=prometheus-cpp
    if [ $cmd == "reset" ]; then
        rm -rf $d
        return
    fi
    test -d $d || git clone https://github.com/jupp0r/${d}.git
    cd $d
    revision=$(git rev-parse HEAD)
    expected_revision="e14ba416e9bcde4439a3bf14fbdb93ef35321ae4" # 0.6.0
    if [ "$revision" != "$expected_revision" ]; then
        git reset --hard
        [ $cached = 0 ] && git fetch
        git checkout $expected_revision
        [ $cached = 0 ] && git submodule init && git submodule update
    fi
    [ $forced == "1" ] && git clean -qfdx && rm -rf _build
    mkdir -p _build
    cd _build
    cmake  -DCMAKE_INSTALL_PREFIX=$prefix -DCMAKE_INSTALL_LIBDIR=$prefix/lib ..
    if [ "$cmd" == "install" ]; then
        make -j4
        $LSUDO make install
    else
        $LSUDO xargs rm < install_manifest.txt
    fi
    $LSUDO $ldconfig
    cd ../..
}

function handle_mongoc()
{
    d=mongo-c-driver
    if [ $cmd == "reset" ]; then
        rm -rf $d
        return
    fi
    test -d $d || git clone https://github.com/mongodb/${d}.git
    cd $d
    revision=$(git rev-parse HEAD)
    expected_revision="71d7eaef31db31483cbb952d24d836c9e0d20b86" # 1.14.0
    if [ "$revision" != "$expected_revision" ]; then
        git reset --hard
        [ $cached = 0 ] && git fetch
        git checkout $expected_revision
        [ $cached = 0 ] && git submodule update
    fi
    [ $forced == "1" ] && git clean -qfdx && rm -rf cmake-build
    echo 1.14.0 > VERSION_CURRENT
    mkdir -p cmake-build
    cd cmake-build
    cmake -DENABLE_AUTOMATIC_INIT_AND_CLEANUP=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$prefix -DCMAKE_INSTALL_LIBDIR=$prefix/lib -DCMAKE_MACOSX_RPATH=ON ..
    if [ "$cmd" == "install" ]; then
        make
        $LSUDO make install
    else
        $LSUDO xargs rm < install_manifest.txt
    fi
    $LSUDO $ldconfig
    cd ../..
}

function handle_json_c()
{
    d=json-c
    if [ $cmd == "reset" ]; then
        rm -rf $d
        return
    fi
    test -d $d || git clone https://github.com/skaes/${d}.git
    cd $d
    revision=$(git rev-parse HEAD)
    expected_revision="b2d8c061eaba416fb2fd0c635d8d95fb7b13f2b4"
    if [ "$revision" != $expected_revision ]; then
        git reset --hard
        [ $cached = 0 ] && git fetch
        git checkout $expected_revision
    fi
    [ $forced == "1" ] && git clean -qfdx
    test -f config.status || (sh autogen.sh && ./configure --prefix=$prefix)
    make -j4
    $LSUDO make $cmd
    $LSUDO $ldconfig
    cd ..
}


function handle_sodium()
{
    v=1.0.17
    d=libsodium-$v
    if [ $cmd == "reset" ]; then
        rm -rf $d
        return
    fi
    f=${d}.tar.gz
    test -f $f && [ $forced != "1" ] || wget -nv https://github.com/jedisct1/libsodium/releases/download/$v/$f
    test -d $d && [ $forced != "1" ] || tar xzvf $f
    cd $d
    [ $forced == "1" ] && rm -f config.status
    test -f config.status || ./configure --prefix=$prefix
    make -j4
    $LSUDO make $cmd
    $LSUDO $ldconfig
    cd ..
}

function handle_zeromq()
{
    d=zeromq4-1
    if [ $cmd == "reset" ]; then
        rm -rf $d
        return
    fi
    test -d $d || git clone https://github.com/skaes/${d}.git
    cd $d
    revision=$(git rev-parse HEAD)
    expected_revision="973d8c9f52cef68e729f0122adc023ceaf3e85bf" # 4.1.5 with thread name patch
    if [ "$revision" != "" ]; then
        git reset --hard
        [ $cached = 0 ] && git fetch
        git checkout $expected_revision
    fi
    [ $forced == "1" ] && git clean -qfdx
    additional_configure_flags=""
    if [ "$documentation" == "0" ]; then
      additional_configure_flags="--without-documentation"
    fi
    test -f config.status || (sh autogen.sh && ./configure --prefix=$prefix $additional_configure_flags)
    make -j4
    $LSUDO make $cmd
    $LSUDO $ldconfig
    cd ..
}

function handle_czmq()
{
    d=czmq
    if [ $cmd == "reset" ]; then
        rm -rf $d
        return
    fi
    test -d $d || git clone https://github.com/skaes/${d}.git
    cd $d
    revision=$(git rev-parse HEAD)
    expected_revision="13cfd790c94434f6350a9d5442f29ab2a8bb0c07" # master Sat Mar 16 19:51:26 2019 +0000
    if [ "$revision" != "" ]; then
        git reset --hard
        [ $cached = 0 ] && git fetch
        git checkout $expected_revision
    fi
    [ $forced == "1" ] && git clean -qfdx
    if [ "$documentation" == "0" ]; then
      additional_configure_flags="--with-docs=no"
    fi
    test -f config.status || (
      sh autogen.sh &&
      ./configure --prefix=$prefix $additional_configure_flags
    )
    make -j4
    $LSUDO make $cmd
    $LSUDO $ldconfig
    cd ..
}

function handle_snappy()
{
    d=snappy
    if [ $cmd == "reset" ]; then
        rm -rf $d
        return
    fi
    test -d $d || git clone https://github.com/skaes/${d}.git
    cd $d
    revision=$(git rev-parse HEAD)
    expected_revision="10c7088336f490e646de7d40e9ace0958b269047" # 1.1.3 with pkg-config patch
    if [ "$revision" != "" ]; then
        git reset --hard
        [ $cached = 0 ] && git fetch
        git checkout $expected_revision
    fi
    [ $forced == "1" ] && git clean -qfdx
    test -f config.status || (sh autogen.sh && ./configure --prefix=$prefix)
    make -j4
    $LSUDO make $cmd
    $LSUDO $ldconfig
    cd ..
}

function handle_lz4()
{
    d=lz4
    if [ $cmd == "reset" ]; then
        rm -rf $d
        return
    fi
    test -d $d || git clone https://github.com/lz4/${d}.git
    cd $d
    revision=$(git rev-parse HEAD)
    expected_revision="641b453d9db536ee020851bfcb1dc39f61006f0a" # master (1.8.3)
    if [ "$revision" != "" ]; then
        git reset --hard
        [ $cached = 0 ] && git fetch
        git checkout $expected_revision
    fi
    [ $forced == "1" ] && git clean -qfdx
    make -j4 PREFIX=$prefix
    $LSUDO make $cmd PREFIX=$prefix
    $LSUDO $ldconfig
    cd ..
}

function handle_microhttpd()
{
    v=0.9.63
    d=libmicrohttpd
    if [ $cmd == "reset" ]; then
        rm -rf $d
        return
    fi
    f=${d}-${v}.tar.gz
    test -f $f || wget -nv https://ftp.gnu.org/gnu/${d}/${f}
    test -d $d || (mkdir $d && tar xzf $f -C $d --strip-components 1)
    cd $d
    test -f config.status || ./configure --prefix=$prefix
    make -j4
    $LSUDO make $cmd
    cd ..
}

case $cmd in
    uninstall|clean|realclean)
        handle_czmq
        handle_microhttpd
        handle_zeromq
        handle_sodium
        handle_json_c
        handle_mongoc
        handle_lz4
        handle_snappy
        handle_prometheus_cpp
        handle_cmake
        ;;
    *)
        handle_cmake
        handle_prometheus_cpp
        handle_snappy
        handle_lz4
        handle_mongoc
        handle_json_c
        handle_sodium
        handle_zeromq
        handle_microhttpd
        handle_czmq
        ;;
esac
